%ComputeMarginal Computes the marginal over a set of given variables
%   M = ComputeMarginal(V, F, E) computes the marginal over variables V
%   in the distribution induced by the set of factors F, given evidence E
%
%   M is a factor containing the marginal over variables V
%   V is a vector containing the variables in the marginal e.g. [1 2 3] for
%     X_1, X_2 and X_3.
%   F is a vector of factors (struct array) containing the factors 
%     defining the distribution
%   E is an N-by-2 matrix, each row being a variable/value pair. 
%     Variables are in the first column and values are in the second column.
%     If there is no evidence, pass in the empty matrix [] for E.


function M = ComputeMarginal(V, F, E)

% Check for empty factor list
if (numel(F) == 0)
      warning('Warning: empty factor list');
      M = struct('var', [], 'card', [], 'val', []);      
      return;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% YOUR CODE HERE:
% M should be a factor
% Remember to renormalize the entries of M!
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
FObserved = ObserveEvidence(F, E)
## for j = 1:length(F),
##   currentF = FObserved(j);
##   if(length(FObserved(j).card) > 1),
##     currentFValReshaped = reshape(currentF.val, currentF.card(1), prod(currentF.card(2:end)));
##   else
##     currentFValReshaped = reshape(currentF.val, 1, currentF.card(1));
##   end;
##   currentFValSums = sum(currentFValReshaped, 1) .+ 0.0000001;
##   currentFValReshaped = currentFValReshaped ./ currentFValSums;
##   currentF.val = reshape(currentFValReshaped, 1, prod(currentF.card))
##   FObserved(j).val = currentF.val;
## end;
for j = 1:length(F),
  previousBound = 1;
  for k = 1:length(FObserved(j).val),
    if(mod(k, FObserved(j).card(1)) == 0),
      currentSum = sum(FObserved(j).val(previousBound:k));
      if(currentSum > 0),
	FObserved(j).val(previousBound:k) = FObserved(j).val(previousBound:k) ./ currentSum;
      end;
      previousBound = k + 1;
    end;
  end;
jointDistribution = ComputeJointDistribution(FObserved)
M = FactorMarginalization(jointDistribution, V);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end
